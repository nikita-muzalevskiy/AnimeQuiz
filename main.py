import random
import telebot
import Mongo as m
from telebot import types
from telebot.async_telebot import AsyncTeleBot
import asyncio
import DB
import os.path

bot = AsyncTeleBot('') # enter your TG-token

@bot.message_handler(commands=['start'])
async def start(message):
    await bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç—ã –ø–æ –∞–Ω–∏–º–µ! –Ø –º–æ–≥—É —Ç—É–ø–∏—Ç—å –∏ –ª–∞–≥–∞—Ç—å, –¥–∞ –∏ –≤–æ–æ–±—â–µ —è –µ—â–µ –Ω–µ –¥–æ–¥–µ–ª–∞–Ω... –ù–æ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–ª—è —Ç–µ–±—è!")
    await selectTest(message.from_user.id)

# —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(content_types=['text'])
async def get_text_messages(message):
    if message.text == 'Hi':
        print('Hi')

@bot.callback_query_handler(func=lambda call: True) #–≤–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –≤—Å–µ—Ö inline-–∫–Ω–æ–ø–æ–∫
async def callback_inline(call):
    if call.data: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–∞, –¥–∞–ª–∞–µ–º —Å –Ω–∏–º–∏ —á—Ç–æ-—Ç–æ
        print(f'–ü–û–õ–£–ß–ò–õ–ò –ö–û–õ–õ–ë–≠–ö: {call.data}')
        user, act, param = call.data.split("/")[0], call.data.split("/")[1], call.data.split("/")[2]
        print(f'USER: {user}')
        # –ü–æ–ª—É—á–∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
        if act == '0':
            await makeTestForUser(user, param)
        # –ü–æ–ª—É—á–∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if act == '1':
            await nextDuel(user, param)
        # –ü–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∫—É
        if act == '2':
            await getStat(user, param)
        # –ü–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
        if act == '3':
            await selectTest(user)

async def getStat(user, param):
    print(DB.getStatistics(param))
    stat = DB.getStatistics(param)
    stat_mess = '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ –∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:\n'
    for s in stat:
        stat_mess = stat_mess + f'{s[0]} - {int(s[1])}%\n'
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    bNewTest = types.InlineKeyboardButton(text='–ü—Ä–æ–π—Ç–∏ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç', callback_data=f"{user}/3/")
    keyboard.add(bNewTest)
    await bot.send_message(user, stat_mess, reply_markup=keyboard)

async def nextDuel(user, param):
    dbase = m.MongoDB()
    user_info = dbase.getDocument(str(user))
    next_duel = user_info['duels'][0]
    if param not in next_duel:
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–µ –æ–∂–∏–¥–∞–ª—Å—è')
    else:
        if (next_duel[0] == param):
            loser = next_duel[1]
        else:
            loser = next_duel[0]
        user_info['winners'].append(param)
        user_info["characters"][param][0] += 1
        user_info["characters"][param][1] += 1
        user_info["characters"][loser][1] += 1
        user_info['duels'].pop(0)
        await checkEndOfRound(user, user_info)
        dbase.updateOne(str(user), user_info)
        dbase = m.MongoDB()
        user_info = dbase.getDocument(str(user))
        await duel(user, user_info)
        print(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id = {user} –ø–æ–±–µ–¥–∏–ª {param}')

async def selectTest(user):
    list = DB.getAnimeList()
    print(list)
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for a in list:
        button = types.InlineKeyboardButton(text=a[0], callback_data=f"{user}/0/{a[0]}")
        keyboard.add(button)
    await bot.send_message(user, "–ü–æ –∫–∞–∫–æ–º—É –∞–Ω–∏–º–µ –±—É–¥–µ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç?", reply_markup=keyboard)

async def checkEndOfRound(user, user_info):
    if len(user_info['duels']) == 0:
        print('–†–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω!')
        user_info['round'] += 1
        if len(user_info['winners']) == 1:
            print('–¢–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω!')
            if os.path.isfile(f"pic/{user_info['anime']}/{str(user_info['winners'][0])}.jpg"):
                await bot.send_photo(user, open(f"pic/{user_info['anime']}/{str(user_info['winners'][0])}.jpg", 'rb'))
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            bNewTest = types.InlineKeyboardButton(text='–ü—Ä–æ–π—Ç–∏ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç', callback_data=f"{user}/3/")
            bStatistics = types.InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞', callback_data=f"{user}/2/{user_info['anime']}")
            keyboard.add(bNewTest, bStatistics)
            await bot.send_message(user, f"–¢–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω!\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å - {user_info['winners'][0]}", reply_markup=keyboard)
            DB.changeStatistics(user_info)
            return
        random.shuffle(user_info['winners'])
        for i in range(0, len(user_info['winners']), 2):
            user_info['duels'].append([user_info['winners'][i], user_info['winners'][i + 1]])
        user_info['winners'] = []

async def makeTestForUser(user, anime):
    characters = DB.getCharacterList(anime)
    random.shuffle(characters)
    characters2 = {}
    for c in characters:
        characters2[c[0]] = [0, 0]
    duels = []
    for i in range(0, len(characters), 2):
        duels.append([characters[i][0], characters[i+1][0]])
    print(f'characters2: {characters2}')
    dbase = m.MongoDB()
    dbase.createUser(str(user))
    dbase.updateUser(str(user), {"user": str(user), "anime": anime, "round": 1, "duels": duels, "winners": [], "characters": characters2})
    user_info = dbase.getDocument(str(user))
    await duel(user, user_info)

#–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –≤ –ú–æ–Ω–≥–æ. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –≤—ã–±–æ—Ä–æ–º
async def duel(user, user_info):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    b1 = types.InlineKeyboardButton(text=str(user_info['duels'][0][0]), callback_data=f"{user}/1/{str(user_info['duels'][0][0])}")
    b2 = types.InlineKeyboardButton(text=str(user_info['duels'][0][1]), callback_data=f"{user}/1/{str(user_info['duels'][0][1])}")
    keyboard.add(b1, b2)
    file1, file2 = f"pic/{user_info['anime']}/{str(user_info['duels'][0][0])}.jpg", f"pic/{user_info['anime']}/{str(user_info['duels'][0][1])}.jpg"
    if os.path.exists(file1) and os.path.exists(file2):
        await bot.send_media_group(user, [telebot.types.InputMediaPhoto(open(file1, "rb")), telebot.types.InputMediaPhoto(open(file2, "rb"))])
    await bot.send_message(user, f"–†–∞—É–Ω–¥ {user_info['round']}!\n–≠—Ç–∞–ø {len(user_info['winners'])+1}/{len(user_info['duels'])+len(user_info['winners'])}", reply_markup=keyboard)

asyncio.run(bot.polling())
# bot.polling(none_stop=True, interval=0) #–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å
def print_hi(name):
    print(f'Hi, {name}')

if __name__ == '__main__':
    print_hi('PyCharm')